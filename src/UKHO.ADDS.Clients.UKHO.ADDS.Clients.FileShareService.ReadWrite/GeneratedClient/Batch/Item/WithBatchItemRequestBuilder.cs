// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;
using System.Threading;
using System;
using UKHO.ADDS.Clients.Kiota.FileShareService.Batch.Item.Acl;
using UKHO.ADDS.Clients.Kiota.FileShareService.Batch.Item.Expiry;
using UKHO.ADDS.Clients.Kiota.FileShareService.Batch.Item.Files;
using UKHO.ADDS.Clients.Kiota.FileShareService.Batch.Item.Status;
using UKHO.ADDS.Clients.Kiota.FileShareService.Models;
namespace UKHO.ADDS.Clients.Kiota.FileShareService.Batch.Item
{
    /// <summary>
    /// Builds and executes requests for operations under \batch\{batchId}
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class WithBatchItemRequestBuilder : BaseRequestBuilder
    {
        /// <summary>The acl property</summary>
        public global::UKHO.ADDS.Clients.Kiota.FileShareService.Batch.Item.Acl.AclRequestBuilder Acl
        {
            get => new global::UKHO.ADDS.Clients.Kiota.FileShareService.Batch.Item.Acl.AclRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The expiry property</summary>
        public global::UKHO.ADDS.Clients.Kiota.FileShareService.Batch.Item.Expiry.ExpiryRequestBuilder Expiry
        {
            get => new global::UKHO.ADDS.Clients.Kiota.FileShareService.Batch.Item.Expiry.ExpiryRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The files property</summary>
        public global::UKHO.ADDS.Clients.Kiota.FileShareService.Batch.Item.Files.FilesRequestBuilder Files
        {
            get => new global::UKHO.ADDS.Clients.Kiota.FileShareService.Batch.Item.Files.FilesRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The status property</summary>
        public global::UKHO.ADDS.Clients.Kiota.FileShareService.Batch.Item.Status.StatusRequestBuilder Status
        {
            get => new global::UKHO.ADDS.Clients.Kiota.FileShareService.Batch.Item.Status.StatusRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>
        /// Instantiates a new <see cref="global::UKHO.ADDS.Clients.Kiota.FileShareService.Batch.Item.WithBatchItemRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public WithBatchItemRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/batch/{batchId}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::UKHO.ADDS.Clients.Kiota.FileShareService.Batch.Item.WithBatchItemRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public WithBatchItemRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/batch/{batchId}", rawUrl)
        {
        }
        /// <summary>
        /// Rollback/Abandon a batch that is still being staged.This should be an idempotent request, i.e. you can call delete on a batch and you&apos;ll get the same response every time.Once a batch has been committed, it can&apos;t be rolled back (and will return status code 409 (Conflict)).
        /// </summary>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="global::UKHO.ADDS.Clients.Kiota.FileShareService.Models.ErrorDescription">When receiving a 400 status code</exception>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task DeleteAsync(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task DeleteAsync(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToDeleteRequestInformation(requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                { "400", global::UKHO.ADDS.Clients.Kiota.FileShareService.Models.ErrorDescription.CreateFromDiscriminatorValue },
            };
            await RequestAdapter.SendNoContentAsync(requestInfo, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// This get will include full details of the batch, for example it&apos;s status, the files in the batch.
        /// </summary>
        /// <returns>A <see cref="global::UKHO.ADDS.Clients.Kiota.FileShareService.Models.BatchDetails"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="global::UKHO.ADDS.Clients.Kiota.FileShareService.Models.ErrorDescription">When receiving a 400 status code</exception>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::UKHO.ADDS.Clients.Kiota.FileShareService.Models.BatchDetails?> GetAsync(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::UKHO.ADDS.Clients.Kiota.FileShareService.Models.BatchDetails> GetAsync(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                { "400", global::UKHO.ADDS.Clients.Kiota.FileShareService.Models.ErrorDescription.CreateFromDiscriminatorValue },
            };
            return await RequestAdapter.SendAsync<global::UKHO.ADDS.Clients.Kiota.FileShareService.Models.BatchDetails>(requestInfo, global::UKHO.ADDS.Clients.Kiota.FileShareService.Models.BatchDetails.CreateFromDiscriminatorValue, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Starts the commit process for a batch. On completion, the files in the batch have been committed to FSS and are ready to query/download.Note - this can be a long running task as it involves moving files to BU storage account.
        /// </summary>
        /// <returns>A <see cref="global::UKHO.ADDS.Clients.Kiota.FileShareService.Batch.Item.WithBatchPutResponse"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="global::UKHO.ADDS.Clients.Kiota.FileShareService.Models.ErrorDescription">When receiving a 400 status code</exception>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::UKHO.ADDS.Clients.Kiota.FileShareService.Batch.Item.WithBatchPutResponse?> PutAsWithBatchPutResponseAsync(List<global::UKHO.ADDS.Clients.Kiota.FileShareService.Batch.Item.WithBatch> body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::UKHO.ADDS.Clients.Kiota.FileShareService.Batch.Item.WithBatchPutResponse> PutAsWithBatchPutResponseAsync(List<global::UKHO.ADDS.Clients.Kiota.FileShareService.Batch.Item.WithBatch> body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = ToPutRequestInformation(body, requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                { "400", global::UKHO.ADDS.Clients.Kiota.FileShareService.Models.ErrorDescription.CreateFromDiscriminatorValue },
            };
            return await RequestAdapter.SendAsync<global::UKHO.ADDS.Clients.Kiota.FileShareService.Batch.Item.WithBatchPutResponse>(requestInfo, global::UKHO.ADDS.Clients.Kiota.FileShareService.Batch.Item.WithBatchPutResponse.CreateFromDiscriminatorValue, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Starts the commit process for a batch. On completion, the files in the batch have been committed to FSS and are ready to query/download.Note - this can be a long running task as it involves moving files to BU storage account.
        /// </summary>
        /// <returns>A <see cref="global::UKHO.ADDS.Clients.Kiota.FileShareService.Batch.Item.WithBatchResponse"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="global::UKHO.ADDS.Clients.Kiota.FileShareService.Models.ErrorDescription">When receiving a 400 status code</exception>
        [Obsolete("This method is obsolete. Use PutAsWithBatchPutResponseAsync instead.")]
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::UKHO.ADDS.Clients.Kiota.FileShareService.Batch.Item.WithBatchResponse?> PutAsync(List<global::UKHO.ADDS.Clients.Kiota.FileShareService.Batch.Item.WithBatch> body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::UKHO.ADDS.Clients.Kiota.FileShareService.Batch.Item.WithBatchResponse> PutAsync(List<global::UKHO.ADDS.Clients.Kiota.FileShareService.Batch.Item.WithBatch> body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = ToPutRequestInformation(body, requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                { "400", global::UKHO.ADDS.Clients.Kiota.FileShareService.Models.ErrorDescription.CreateFromDiscriminatorValue },
            };
            return await RequestAdapter.SendAsync<global::UKHO.ADDS.Clients.Kiota.FileShareService.Batch.Item.WithBatchResponse>(requestInfo, global::UKHO.ADDS.Clients.Kiota.FileShareService.Batch.Item.WithBatchResponse.CreateFromDiscriminatorValue, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Rollback/Abandon a batch that is still being staged.This should be an idempotent request, i.e. you can call delete on a batch and you&apos;ll get the same response every time.Once a batch has been committed, it can&apos;t be rolled back (and will return status code 409 (Conflict)).
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToDeleteRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToDeleteRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.DELETE, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            return requestInfo;
        }
        /// <summary>
        /// This get will include full details of the batch, for example it&apos;s status, the files in the batch.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Starts the commit process for a batch. On completion, the files in the batch have been committed to FSS and are ready to query/download.Note - this can be a long running task as it involves moving files to BU storage account.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToPutRequestInformation(List<global::UKHO.ADDS.Clients.Kiota.FileShareService.Batch.Item.WithBatch> body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToPutRequestInformation(List<global::UKHO.ADDS.Clients.Kiota.FileShareService.Batch.Item.WithBatch> body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = new RequestInformation(Method.PUT, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            requestInfo.SetContentFromParsable(RequestAdapter, "application/json", body);
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::UKHO.ADDS.Clients.Kiota.FileShareService.Batch.Item.WithBatchItemRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::UKHO.ADDS.Clients.Kiota.FileShareService.Batch.Item.WithBatchItemRequestBuilder WithUrl(string rawUrl)
        {
            return new global::UKHO.ADDS.Clients.Kiota.FileShareService.Batch.Item.WithBatchItemRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class WithBatchItemRequestBuilderDeleteRequestConfiguration : RequestConfiguration<DefaultQueryParameters>
        {
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class WithBatchItemRequestBuilderGetRequestConfiguration : RequestConfiguration<DefaultQueryParameters>
        {
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class WithBatchItemRequestBuilderPutRequestConfiguration : RequestConfiguration<DefaultQueryParameters>
        {
        }
    }
}
#pragma warning restore CS0618
