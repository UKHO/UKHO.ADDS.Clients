parameters:
  - name: outputDirectory
    type: string
  - name: language
    type: string
    default: 'csharp'
  - name: openApiRepo
    type: string
  - name: openApiBranch
    type: string
    default: 'main'
  - name: openApiSpecPath
    type: string
  - name: GeneratedApiClassName
    type: string
  - name: Namespace
    type: string

steps:
  - task: UseDotNet@2
    displayName: 'Install .NET SDK for Kiota'
    inputs:
      packageType: sdk
      version: '8.0.x'

  - script: dotnet tool install --global Microsoft.OpenApi.Kiota
    displayName: 'Install Kiota CLI'

  # # Checkout the GitHub repo using a service connection
  # - checkout: git://${{ parameters.openApiRepo }}@${{ parameters.openApiBranch }}
  #   displayName: 'Checkout OpenAPI Spec Repository'
  #   persistCredentials: true
  #   path: openapi-spec-repo

  - checkout: ${{ parameters.openApiRepo }}
    path: s

  - powershell:  |
      Write-Host "Root Checkout:"
      Get-ChildItem -Recurse $(Build.SourcesDirectory) | Foreach-Object { $_.FullName }
      Write-Host "'nDeployment Folder"
      if (Test-Path $(Build.SourcesDirectory)\deployment)
      {
        Get-ChildItem -Recurse $(Build.SourcesDirectory)\deployment | Foreach-Object { $_.FullName }
      }
      else{ Write-Host "not found"}
    displayName: 'List source directory contents'

  - script: |
      echo "##vso[task.setvariable variable=PATH]$PATH:$HOME/.dotnet/tools"
    displayName: 'Set PATH for Kiota CLI'

  - script: |
      kiota generate ^
        --openapi $(Build.SourcesDirectory)/${{ parameters.openApiRepo }}/${{ parameters.openApiSpecPath }} ^
        --output $(Build.SourcesDirectory)/${{ parameters.outputDirectory }} ^
        --language ${{ parameters.language }} ^
        --class-name ${{ parameters.GeneratedApiClassName }} ^
        --namespace-name ${{ parameters.Namespace }}
    displayName: 'Generate client with Kiota'
