// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;
using System.Threading;
using System;
using UKHO.ADDS.Clients.Kiota.FileShareService.Models;
namespace UKHO.ADDS.Clients.Kiota.FileShareService.Batch.Item.Files.Item.Item
{
    /// <summary>
    /// Builds and executes requests for operations under \batch\{batchId}\files\{filename}\{blockId}
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class WithBlockItemRequestBuilder : BaseRequestBuilder
    {
        /// <summary>
        /// Instantiates a new <see cref="global::UKHO.ADDS.Clients.Kiota.FileShareService.Batch.Item.Files.Item.Item.WithBlockItemRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public WithBlockItemRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/batch/{batchId}/files/{filename}/{blockId}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::UKHO.ADDS.Clients.Kiota.FileShareService.Batch.Item.Files.Item.Item.WithBlockItemRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public WithBlockItemRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/batch/{batchId}/files/{filename}/{blockId}", rawUrl)
        {
        }
        /// <summary>
        /// It uploads block of bytes data for future inclusion in a file.Each block is identified by a block ID that is unique for a file. Block IDs are scoped to a particular file, so different files can have blocks with same IDs. Each block can be of a different size, up to any set max limit. An uploaded block can be used only in the file for which it was uploaded.Blocks can be uploaded in parallel, in any order. Once all blocks have been uploaded, use the &apos;putBlocksInFile&apos; operation to create a file using the list of Block IDs for that file.
        /// </summary>
        /// <param name="body">Binary request body</param>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="contentType">The request body content type.</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="global::UKHO.ADDS.Clients.Kiota.FileShareService.Models.ErrorDescription">When receiving a 400 status code</exception>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task PutAsync(Stream body, string contentType, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task PutAsync(Stream body, string contentType, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            if(string.IsNullOrEmpty(contentType)) throw new ArgumentNullException(nameof(contentType));
            var requestInfo = ToPutRequestInformation(body, contentType, requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                { "400", global::UKHO.ADDS.Clients.Kiota.FileShareService.Models.ErrorDescription.CreateFromDiscriminatorValue },
            };
            await RequestAdapter.SendNoContentAsync(requestInfo, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// It uploads block of bytes data for future inclusion in a file.Each block is identified by a block ID that is unique for a file. Block IDs are scoped to a particular file, so different files can have blocks with same IDs. Each block can be of a different size, up to any set max limit. An uploaded block can be used only in the file for which it was uploaded.Blocks can be uploaded in parallel, in any order. Once all blocks have been uploaded, use the &apos;putBlocksInFile&apos; operation to create a file using the list of Block IDs for that file.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="body">Binary request body</param>
        /// <param name="contentType">The request body content type.</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToPutRequestInformation(Stream body, string contentType, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToPutRequestInformation(Stream body, string contentType, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            if(string.IsNullOrEmpty(contentType)) throw new ArgumentNullException(nameof(contentType));
            var requestInfo = new RequestInformation(Method.PUT, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.SetStreamContent(body, contentType);
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::UKHO.ADDS.Clients.Kiota.FileShareService.Batch.Item.Files.Item.Item.WithBlockItemRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::UKHO.ADDS.Clients.Kiota.FileShareService.Batch.Item.Files.Item.Item.WithBlockItemRequestBuilder WithUrl(string rawUrl)
        {
            return new global::UKHO.ADDS.Clients.Kiota.FileShareService.Batch.Item.Files.Item.Item.WithBlockItemRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class WithBlockItemRequestBuilderPutRequestConfiguration : RequestConfiguration<DefaultQueryParameters>
        {
        }
    }
}
#pragma warning restore CS0618
