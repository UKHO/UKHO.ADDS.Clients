// <auto-generated/>
#pragma warning disable CS0618
using ApiSdk.Models;
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;
using System.Threading;
using System;
namespace ApiSdk.Attributes.Search
{
    /// <summary>
    /// Builds and executes requests for operations under \attributes\search
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class SearchRequestBuilder : BaseRequestBuilder
    {
        /// <summary>
        /// Instantiates a new <see cref="global::ApiSdk.Attributes.Search.SearchRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public SearchRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/attributes/search{?%24filter*,maxAttributeValueCount*}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::ApiSdk.Attributes.Search.SearchRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public SearchRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/attributes/search{?%24filter*,maxAttributeValueCount*}", rawUrl)
        {
        }
        /// <summary>
        /// Get a list of the batch attributes and their values that have been applied to batches for a batch search.
        /// </summary>
        /// <returns>A <see cref="global::ApiSdk.Attributes.Search.SearchGetResponse"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="global::ApiSdk.Models.ErrorDescription">When receiving a 400 status code</exception>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::ApiSdk.Attributes.Search.SearchGetResponse?> GetAsSearchGetResponseAsync(Action<RequestConfiguration<global::ApiSdk.Attributes.Search.SearchRequestBuilder.SearchRequestBuilderGetQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::ApiSdk.Attributes.Search.SearchGetResponse> GetAsSearchGetResponseAsync(Action<RequestConfiguration<global::ApiSdk.Attributes.Search.SearchRequestBuilder.SearchRequestBuilderGetQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                { "400", global::ApiSdk.Models.ErrorDescription.CreateFromDiscriminatorValue },
            };
            return await RequestAdapter.SendAsync<global::ApiSdk.Attributes.Search.SearchGetResponse>(requestInfo, global::ApiSdk.Attributes.Search.SearchGetResponse.CreateFromDiscriminatorValue, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Get a list of the batch attributes and their values that have been applied to batches for a batch search.
        /// </summary>
        /// <returns>A <see cref="global::ApiSdk.Attributes.Search.SearchResponse"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="global::ApiSdk.Models.ErrorDescription">When receiving a 400 status code</exception>
        [Obsolete("This method is obsolete. Use GetAsSearchGetResponseAsync instead.")]
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::ApiSdk.Attributes.Search.SearchResponse?> GetAsync(Action<RequestConfiguration<global::ApiSdk.Attributes.Search.SearchRequestBuilder.SearchRequestBuilderGetQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::ApiSdk.Attributes.Search.SearchResponse> GetAsync(Action<RequestConfiguration<global::ApiSdk.Attributes.Search.SearchRequestBuilder.SearchRequestBuilderGetQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                { "400", global::ApiSdk.Models.ErrorDescription.CreateFromDiscriminatorValue },
            };
            return await RequestAdapter.SendAsync<global::ApiSdk.Attributes.Search.SearchResponse>(requestInfo, global::ApiSdk.Attributes.Search.SearchResponse.CreateFromDiscriminatorValue, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Get a list of the batch attributes and their values that have been applied to batches for a batch search.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::ApiSdk.Attributes.Search.SearchRequestBuilder.SearchRequestBuilderGetQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::ApiSdk.Attributes.Search.SearchRequestBuilder.SearchRequestBuilderGetQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::ApiSdk.Attributes.Search.SearchRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::ApiSdk.Attributes.Search.SearchRequestBuilder WithUrl(string rawUrl)
        {
            return new global::ApiSdk.Attributes.Search.SearchRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Get a list of the batch attributes and their values that have been applied to batches for a batch search.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class SearchRequestBuilderGetQueryParameters 
        {
            /// <summary>The search `$filter` allows callers to filter the returned results loosely based on the OData 4.01 `$filter` syntax (See &lt;http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part2-url-conventions.html#sec_QueryOptions&gt; for a full description of the OData query options).## User AttributesUser attributes can be used as part of the filter with the attribute name enclosed within `$batch( )` or `$file( )` e.g. `$batch(Attribute Name)` or `$file(Attribute Name)`. User Attribute names are not case sensitive, e.g. `$batch(Product)` and `$Batch(product)` are the same.This allows the string operators below to be used, for example: `$filter=$batch(Product) eq &apos;AVCS&apos;` or `$filter=endswith($file(Week Number), &apos;/52&apos;)`Batches and files within the batch have user attributes. For filtering, a batch is considered to have the combination of its own attributes and all the attributes of the files in that batch. Operators will then match on any of the attributes, so an operator could match on one or more of the batch&apos;s attributes, or any of the file&apos;s attributes.A batch that has no instances of the attribute and no files with an instance of the attribute will be considered to have a null value for that attribute. Combined with the `null` literal, this can be used to test for the presence or absence of a user attribute.  (e.g. `$filter=$batch(Product) eq null` will return batches that don&apos;t have a `Product` attribute and `$filter=$file(Product) eq null` will return all batches for which files don&apos;t have a `Product` attribute.)**Note**: user attribute values can only be compared with a literal value. It is not possible to compare one user attribute value with another user attribute value. e.g. `$filter=$batch(Product) eq $batch(Service)` or `$filter=$file(Product) eq $file(Service)` is an invalid filter and will return HTTP Status Code 400 - Bad Request.Additionally, you can search for any batch user attribute that has a value that contains a search term. `$batchContains(&apos;searchTerm&apos;)` will look for any batch with any attribute that contains the &apos;searchTerm&apos;. Whereas `$batch()` and `$file()` are string functions, i.e. they return the value of the attribute to then be compared with an operator below, `$batchContains()` is a boolean function and returns true or false. `$batchContains()` can be combined with boolean operators such as and and or.## System AttributesSystem attribute names are not case sensitive. For example: `batchPublishedDate` is the same as `batchpublisheddate`.The service supports queries on the following system attributes:* `businessUnit` - Matches a string, e.g. `$filter=businessUnit eq &apos;ADDS&apos;`. Partial matches are supported using the string operators below. e.g. `$filter=startswith(businessUnit,&apos;Test&apos;)`.* `batchPublishedDate` - The date the batch was published (committed) (not the individual files, or the initial batch created date). Only matches against a date literal or expression. Dates must be specified in full date-time notation as defined by RFC 3339, section 5.6, for example, 2017-07-21T17:32:28Z. The system supports the comparison operators listed below e.g. `$filter=batchPublishedDate gt 2020-12-23T17:45:12Z`.* `expiryDate` - Only matches against a date literal or expression. Dates must be specified in full date-time notation as defined by RFC 3339, section 5.6, for example, 2017-07-21T17:32:28Z. The system supports the comparison operators listed below. e.g. `$filter=expiryDate lt 2020-01-05T19:56:48Z`.* `filename` - Matches a string which is the filename of any of the files within a batch, e.g. `$filter=filename eq &apos;AUL37137.004&apos;`. This will also support partial filename matches using the string operators below. e.g. `$filter=endswith(filename,&apos;.iso&apos;)`.* `filesize` - Matches an integer that is the the file size in bytes of any of the files in the batch. The match can be made using `eq` and `ne` operator as well as the comparison operators listed below. e.g. `$filter=fileSize gt 1000000` finds any batch that contains one or more files that is bigger than 1000000 bytes (1MB).* `mimetype` - Matches a string that is the MIME Type of any of the files in the batch.  Partial matches can be made with the string operators listed below. e.g. `$filter=startswith(mimeType, &apos;text&apos;)` would match `text/json` and `text/plain` but not `application/json`.The following system attributes have been considered and are **not** currently in scope:* ~~`hash` - Search for this binary object?~~* ~~`totalBatchSize` - Match against the sum of all the file sizes of the files in the batch? Much harder to translate to a SQL query, but possibly more useful to the users?~~**Note**: System Attribute values can only be compared with a literal value. It is not possible to compare one System Attribute value with another System Attribute value. e.g. `$filter=batchedPublishedDate gt expiryDate` is an invalid filter and will return HTTP Status Code 400 - Bad Request.## Supported OperatorsComparison between two values of different types will fail (e.g. you can&apos;t compare a string value and a date, the query will return status code 400 (Bad Request)).* And (`and`) - This binary operator can be used between two expressions and will return true if both the left and right expression are true.* Or (`or`) - This binary operator can be used between two expressions and will return true if either the left expression or the right expression is true.* Not (`not`) - The `not` operator returns true if the operand returns false, otherwise it returns false.  e.g. `$filter=not endswith($batch(Product),&apos;ilk&apos;) or not endswith($file(Product),&apos;ilk&apos;).* Equals (`eq`) - Comparison of two values to see if they are the same. For string values, the comparison is case-insensitive, so `&apos;Bob&apos; eq &apos;BOB&apos;` will return true. For Date-Time values, the comparison is exact so `2017-07-21T17:32:28Z eq 2017-07-21T17:32:29Z` will return false.* Not Equals (`ne`) - Comparison of two values to see if they are different. For string values, the comparison is case-insensitive, so `&apos;Bob&apos; ne &apos;BOB&apos;` will return false. For Date-Time values, the comparison is exact so `2017-07-21T17:32:28Z ne 2017-07-21T17:32:29Z` will return true.* Comparison operators (only applies to numeric system attributes (i.e. `filesize`) or date system attributes (i.e. `batchPublishedDate` and `expiryDate`)).  * Greater Than (`gt`) e.g. `fileSize gt 1000000` or `batchPublishedDate gt 2020-12-23T17:45:12Z`.  * Greater Than or Equals (`ge`) e.g. `fileSize ge 1000000` or `batchPublishedDate ge 2020-12-23T17:45:12Z`.  * Less Than (`lt`) e.g. `fileSize lt 1000000` or `batchPublishedDate lt 2020-12-23T17:45:12Z`.  * Less Than or Equals (`le`) e.g. `fileSize le 1000000` or `batchPublishedDate le 2020-12-23T17:45:12Z`.* String operators:  * Contains (`contains()`).  * Starts With (`startswith()`).  * Ends With (`endswith()`) - This operator returns true if the value of the attribute is a string and ends with the provided literal. e.g. `endswith(filename,&apos;.iso&apos;)`.  **Note**: the system does not support any other Functions or Arithmetic Operators.## Literal valuesThe system supports the following literal values:* Null (`null`).* True (`true`).* False (`false`).* Integer values (e.g. `-128`).* String values (e.g. `&apos;Say Hello,then go&apos;`).* String values with single quote (e.g. `&apos;Rob O&apos;Neil&apos;`) - Replace 1 single quote with 2 single quotes to search a value having single quote. e.g. `&apos;Rob O&apos;&apos;Neil&apos;`* DateTimeOffset values (e.g. `2012-12-03T07:16:23Z`). Dates must be specified in the RFC 3339 format. They can contain a date-time offset, but will be converted to UTC before comparison.## Operator PrecedenceOperators are listed by category in order of precedence from highest to lowest. Operators in the same category have equal precedence:  | Group           | Operator | Description           |  |-----------------|----------|-----------------------|  | Grouping        | ( )      | Precedence grouping   |  | Primary         | xxx( )   | Method Call           |  | Unary           | not      | Logical Negation      |  | Relational      | gt       | Greater Than          |  |                 | ge       | Greater Than or Equal |  |                 | lt       | Less Than             |  |                 | le       | Less Than or Equal    |  | Equality        | eq       | Equal                 |  |                 | ne       | Not Equal             |  | Conditional AND | and      | Logical And           |  | Conditional OR  | or       | Logical Or            |The Grouping operator (open and close parenthesis `( )`) controls the evaluation order of an expression. The Grouping operator returns the expression grouped inside the parenthesis, e.g.:```  $filter=($batch(Product Type) eq &apos;AVCS&apos;) and ($batch(Week Number) eq &apos;12&apos; or $batch(Week Number) eq &apos;13&apos;)```## Examples:  `$filter=$batch(Product Type) eq &apos;AVCS&apos; and $batch(Week Number) eq &apos;12&apos; and batchPublishedDate gt 2020-10-21T00:00:00Z` - All AVCS files for Week Number 2020/12 created after 21 Oct 2020.  `$filter=batchPublishedDate gt 2020-10-21T00:00:00Z` - All files created after midnight on 21 Oct 2020.    `$filter=expiryDate lt 2020-12-21T00:00:00Z` - All files due to expire before 21 Dec 2020.  `$filter=`$batchContains(&apos;AVCS&apos;)`</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("%24filter")]
            public string? Filter { get; set; }
#nullable restore
#else
            [QueryParameter("%24filter")]
            public string Filter { get; set; }
#endif
            /// <summary>Optional. Specify the maximum number of batch attribute values to be returned in the result. If specified, must be greater than or equal to 1. If less than 1, the service will return status code 400 (Bad Request).</summary>
            [QueryParameter("maxAttributeValueCount")]
            public int? MaxAttributeValueCount { get; set; }
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class SearchRequestBuilderGetRequestConfiguration : RequestConfiguration<global::ApiSdk.Attributes.Search.SearchRequestBuilder.SearchRequestBuilderGetQueryParameters>
        {
        }
    }
}
#pragma warning restore CS0618
