// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace ApiSdk.Models
{
    /// <summary>
    /// Object representing the details of a batch.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class BatchDetails : IAdditionalDataHolder, IParsable
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The allFilesZipSize property</summary>
        public int? AllFilesZipSize { get; set; }
        /// <summary>The attributes property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::ApiSdk.Models.BatchDetails_attributes>? Attributes { get; set; }
#nullable restore
#else
        public List<global::ApiSdk.Models.BatchDetails_attributes> Attributes { get; set; }
#endif
        /// <summary>The batchId property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? BatchId { get; set; }
#nullable restore
#else
        public string BatchId { get; set; }
#endif
        /// <summary>The batchPublishedDate property</summary>
        public DateTimeOffset? BatchPublishedDate { get; set; }
        /// <summary>The businessUnit property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? BusinessUnit { get; set; }
#nullable restore
#else
        public string BusinessUnit { get; set; }
#endif
        /// <summary>The expiryDate property</summary>
        public DateTimeOffset? ExpiryDate { get; set; }
        /// <summary>The files property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::ApiSdk.Models.BatchDetails_files>? Files { get; set; }
#nullable restore
#else
        public List<global::ApiSdk.Models.BatchDetails_files> Files { get; set; }
#endif
        /// <summary>Indicates if the zip of all files in the batch is available. See &quot;#/paths/batch/{batchId}/files&quot;</summary>
        public bool? IsAllFilesZipAvailable { get; set; }
        /// <summary>The status property</summary>
        public global::ApiSdk.Models.BatchDetails_status? Status { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::ApiSdk.Models.BatchDetails"/> and sets the default values.
        /// </summary>
        public BatchDetails()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::ApiSdk.Models.BatchDetails"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::ApiSdk.Models.BatchDetails CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::ApiSdk.Models.BatchDetails();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "allFilesZipSize", n => { AllFilesZipSize = n.GetIntValue(); } },
                { "attributes", n => { Attributes = n.GetCollectionOfObjectValues<global::ApiSdk.Models.BatchDetails_attributes>(global::ApiSdk.Models.BatchDetails_attributes.CreateFromDiscriminatorValue)?.AsList(); } },
                { "batchId", n => { BatchId = n.GetStringValue(); } },
                { "batchPublishedDate", n => { BatchPublishedDate = n.GetDateTimeOffsetValue(); } },
                { "businessUnit", n => { BusinessUnit = n.GetStringValue(); } },
                { "expiryDate", n => { ExpiryDate = n.GetDateTimeOffsetValue(); } },
                { "files", n => { Files = n.GetCollectionOfObjectValues<global::ApiSdk.Models.BatchDetails_files>(global::ApiSdk.Models.BatchDetails_files.CreateFromDiscriminatorValue)?.AsList(); } },
                { "isAllFilesZipAvailable", n => { IsAllFilesZipAvailable = n.GetBoolValue(); } },
                { "status", n => { Status = n.GetEnumValue<global::ApiSdk.Models.BatchDetails_status>(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteIntValue("allFilesZipSize", AllFilesZipSize);
            writer.WriteCollectionOfObjectValues<global::ApiSdk.Models.BatchDetails_attributes>("attributes", Attributes);
            writer.WriteStringValue("batchId", BatchId);
            writer.WriteDateTimeOffsetValue("batchPublishedDate", BatchPublishedDate);
            writer.WriteStringValue("businessUnit", BusinessUnit);
            writer.WriteDateTimeOffsetValue("expiryDate", ExpiryDate);
            writer.WriteCollectionOfObjectValues<global::ApiSdk.Models.BatchDetails_files>("files", Files);
            writer.WriteBoolValue("isAllFilesZipAvailable", IsAllFilesZipAvailable);
            writer.WriteEnumValue<global::ApiSdk.Models.BatchDetails_status>("status", Status);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
